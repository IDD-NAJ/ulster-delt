generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                   @id @default(cuid())
  email                   String                   @unique
  hashedPassword          String
  firstName               String
  lastName                String
  dateOfBirth             String
  phoneNumber             String?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  accounts                Account[]
  address                 Address?
  recurringTransactions   RecurringTransaction[]
  securityInfo            SecurityInfo?
  transactions            Transaction[]
  transactionCategories   TransactionCategory[]
  transactionTemplates    TransactionTemplate[]
  cards                   Card[]
  notificationPreferences NotificationPreferences?
  role                    UserRole                 @default(USER)
  sessions                Session[]
  name                    String?
  emailVerified           DateTime?
  password                String?
  image                   String?
  Notification            Notification[]
}

model Address {
  id         String   @id @default(cuid())
  street     String
  city       String
  state      String
  postalCode String
  country    String
  userId     String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SecurityInfo {
  id                   String   @id @default(cuid())
  pin                  String
  identificationType   String
  identificationNumber String
  securityQuestion     String
  securityAnswer       String
  userId               String   @unique
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                    String                 @id @default(cuid())
  type                  String
  accountNumber         String                 @unique @default(uuid())
  balance               Float                  @default(0)
  userId                String
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  recurringTransactions RecurringTransaction[]
  transactions          Transaction[]
  transactionTemplates  TransactionTemplate[]
  provider              String
  providerAccountId     String
  refresh_token         String?                @db.Text
  access_token          String?                @db.Text
  expires_at            Int?
  token_type            String?
  scope                 String?
  id_token              String?                @db.Text
  session_state         String?

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Transaction {
  id                     String                @id @default(cuid())
  userId                 String
  accountId              String
  type                   TransactionType
  amount                 Float
  currency               String
  description            String
  reference              String?
  status                 TransactionStatus     @default(COMPLETED)
  categoryId             String?
  recurringTransactionId String?
  templateId             String?
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  account                Account               @relation(fields: [accountId], references: [id])
  category               TransactionCategory?  @relation(fields: [categoryId], references: [id])
  recurringTransaction   RecurringTransaction? @relation(fields: [recurringTransactionId], references: [id])
  template               TransactionTemplate?  @relation(fields: [templateId], references: [id])
  user                   User                  @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([accountId])
  @@index([categoryId])
}

model TransactionCategory {
  id                    String                 @id @default(cuid())
  userId                String
  name                  String
  color                 String?
  icon                  String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  recurringTransactions RecurringTransaction[]
  transactions          Transaction[]
  user                  User                   @relation(fields: [userId], references: [id])
  transactionTemplates  TransactionTemplate[]

  @@index([userId])
}

model RecurringTransaction {
  id            String               @id @default(cuid())
  userId        String
  accountId     String
  type          TransactionType
  amount        Float
  currency      String
  description   String
  categoryId    String?
  frequency     RecurringFrequency
  startDate     DateTime
  endDate       DateTime?
  nextDue       DateTime
  lastProcessed DateTime?
  status        RecurringStatus      @default(ACTIVE)
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  account       Account              @relation(fields: [accountId], references: [id])
  category      TransactionCategory? @relation(fields: [categoryId], references: [id])
  user          User                 @relation(fields: [userId], references: [id])
  transactions  Transaction[]

  @@index([userId])
  @@index([accountId])
  @@index([nextDue])
}

model TransactionTemplate {
  id           String               @id @default(cuid())
  userId       String
  name         String
  type         TransactionType
  amount       Float
  currency     String
  description  String
  categoryId   String?
  accountId    String
  reference    String?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  transactions Transaction[]
  account      Account              @relation(fields: [accountId], references: [id])
  category     TransactionCategory? @relation(fields: [categoryId], references: [id])
  user         User                 @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Card {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type           String // e.g., "DEBIT", "CREDIT"
  lastFourDigits String
  isActive       Boolean  @default(true)
  expiryMonth    Int
  expiryYear     Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  number         String
  expiry         DateTime
  cvv            String

  @@index([userId])
}

model NotificationPreferences {
  id                 String   @id @default(cuid())
  userId             String   @unique
  emailNotifications Boolean  @default(true)
  pushNotifications  Boolean  @default(true)
  smsNotifications   Boolean  @default(false)
  marketingEmails    Boolean  @default(true)
  transactionAlerts  Boolean  @default(true)
  securityAlerts     Boolean  @default(true)
  balanceAlerts      Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum AccountType {
  CHECKING
  SAVINGS
  CREDIT
  INVESTMENT
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum TransactionType {
  DEBIT
  CREDIT
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum RecurringFrequency {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum RecurringStatus {
  ACTIVE
  PAUSED
  CANCELLED
}

enum UserRole {
  USER
  ADMIN
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AdminUser {
  id             String   @id @default(cuid())
  email          String   @unique
  name           String
  hashedPassword String
  role           String   @default("ADMIN")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Notification {
  id        String   @id @default(cuid())
  message   String
  type      String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
}
